/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 * ------------------------------------------------
 * | COMMENT&NOTE                                 |
 * ------------------------------------------------
 *   Clock:100MHz
 *
 */

#include "helloworld.h"
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xscugic.h"
#include "uart_parameter.h"
#include <stdlib.h>
#include "AXI_GPIO.h"
#include "bsp_usart.h"

//#define ECHO_ENABLE

/************************** Variable Definitions *****************************/

XUartPs Uart_PS; /* Instance of the UART Device */
XScuGic IntcInstPtr;
/* UART receiver buffer */
u8 ReceivedBuffer[MAX_LEN];
/* UART receiver buffer pointer*/
u8 *ReceivedBufferPtr;
/* UART receiver byte number */
volatile u32 ReceivedByteNum;
volatile u32 ReceivedFlag;
int Status;
XUartPs_Config *Config;
u32 SendByteNum;
u8 *SendBufferPtr;
u8 recv_data;
u8 i = 0;
u8 delay_point_buffer[4] = { 0 };
float real_angle_A = 0.0;
float real_angle_B = 0.0;

extern XGpio i_gpio_angle, i_gpio_angle_valid, o_gpio_delay_point,
        o_gpio_data_in_ena, o_gpio_sys_rst_n;

int main(void)
{
    init();
    while (1)
    {
        if (ReceivedFlag)
        {
            /* Reset receiver pointer, flag, byte number */
            ReceivedBufferPtr = ReceivedBuffer;
            SendBufferPtr = ReceivedBuffer;
            SendByteNum = ReceivedByteNum;
            ReceivedFlag = 0;
            ReceivedByteNum = 1;
            recv_data = atoi((char *)SendBufferPtr);
#ifdef ECHO_ENABLE
            printf("%d\n", recv_data);
#endif
            memset(ReceivedBuffer, 0, sizeof ReceivedBuffer); //clear RecvBuffer
            delay_point_buffer[i++] = recv_data;
            if (i >= 4)
            {
                real_angle_A = direction(delay_point_buffer[0],
                        delay_point_buffer[1]);
                real_angle_B = direction(delay_point_buffer[2],
                        delay_point_buffer[3]);
                printf("A%fB%f\n", real_angle_A, real_angle_B);
                i = 0;
            }
        }
        usleep(10000);
    }
}

void init(void)
{
    init_platform();
    init_gpio();
    ReceivedBufferPtr = ReceivedBuffer;
    ReceivedFlag = 0;
    ReceivedByteNum = 0;

    Config = XUartPs_LookupConfig(UART_DEVICE_ID);
    if (NULL == Config)
    {
        return XST_FAILURE;
    }
    Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    /* Use Normal mode. */
    XUartPs_SetOperMode(&Uart_PS, XUARTPS_OPER_MODE_NORMAL);
    /* Set uart mode Baud Rate 115200, 8bits, no parity, 1 stop bit */
    XUartPs_SetDataFormat(&Uart_PS, &UartFormat);
    /*Set receiver FIFO interrupt trigger level, here set to 1*/
    XUartPs_SetFifoThreshold(&Uart_PS, 1);
    /* Enable the receive FIFO trigger level interrupt and empty interrupt for the device */
    XUartPs_SetInterruptMask(&Uart_PS, XUARTPS_IXR_RXOVR | XUARTPS_IXR_RXEMPTY);

    SetupInterruptSystem(&IntcInstPtr, &Uart_PS, UART_INT_IRQ_ID);
    print("254\n");
}

void init_gpio(void)
{
    init_i_gpio_angle();
    init_i_gpio_angle_valid();
    init_o_gpio_delay_point();
    init_o_gpio_data_in_ena();
    init_o_gpio_sys_rst_n();
}

float direction(u32 delay_point1, u32 delay_point2)
{
    u32 angle, angle_valid;
    float real_angle;
    reset_PL();
    usleep(1);

    XGpio_DiscreteWrite(&o_gpio_delay_point, 1, delay_point1);
    data_in_ena();
    usleep(100);

    XGpio_DiscreteWrite(&o_gpio_delay_point, 1, delay_point2);
    data_in_ena();
    usleep(100);

    while (1)
    {
        angle_valid = XGpio_DiscreteRead(&i_gpio_angle_valid, 1);
        if (angle_valid == 1)
        {
            usleep(1);
            angle = XGpio_DiscreteRead(&i_gpio_angle, 1);
            real_angle = (float) angle / 2097152 * 180;
            break;
        }
    }
//    sleep(1);
    return real_angle;
}
