/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 * ------------------------------------------------
 * | COMMENT&NOTE                                 |
 * ------------------------------------------------
 *   Clock:100MHz  50MHz
 *
 */

#include "helloworld.h"
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xscugic.h"
#include "uart_parameter.h"
#include <stdlib.h>
#include "AXI_GPIO.h"

#define UART_DEVICE_ID      XPAR_XUARTPS_0_DEVICE_ID
#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID
#define UART_INT_IRQ_ID     XPAR_XUARTPS_0_INTR

/* Statement */
#define UART_TX      0
#define UART_RXCHECK 1
#define UART_WAIT    2

/* maximum receiver length */
#define MAX_LEN         20

/* Command */
#define OK_STATUS_TX        1
#define CHECK_CODE_RX       255
#define RST_CODE_RX         254
#define ROM_FFT_RST_CODE_RX 253
/************************** Variable Definitions *****************************/

XUartPs Uart_PS; /* Instance of the UART Device */
XScuGic IntcInstPtr;

/* UART receiver buffer */
u8 ReceivedBuffer[MAX_LEN];
/* UART receiver buffer pointer*/
u8 *ReceivedBufferPtr;
/* UART receiver byte number */
volatile u32 ReceivedByteNum;

volatile u32 ReceivedFlag;
//var definition
extern XGpio i_gpio_angle, i_gpio_angle_valid, o_gpio_delay_point,
        o_gpio_rom_fft_rst_n, o_gpio_sys_rst_n;

/*
 * Function declaration
 */
int UartPsSend(XUartPs *InstancePtr, u8 *BufferPtr, u32 NumBytes);
int UartPsRev(XUartPs *InstancePtr, u8 *BufferPtr, u32 NumBytes);
int SetupInterruptSystem(XScuGic *IntcInstancePtr, XUartPs *UartInstancePtr,
        u16 UartIntrId);
void Handler(void *CallBackRef);

int main(void)
{
    init_platform();
//    print("111\n");
    init_gpio();
    int Status;
    XUartPs_Config *Config;

    u32 SendByteNum;
    u8 *SendBufferPtr;
    u8 state = UART_RXCHECK;
    u8 recv_data;
    u8 i = 0;
    u8 delay_point_buffer[4] =
    { 0 };
    u32 angle = 0;
    float real_angle_A = 0.0;
    float real_angle_B = 0.0;
    ReceivedBufferPtr = ReceivedBuffer;

    ReceivedFlag = 0;
    ReceivedByteNum = 0;

    Config = XUartPs_LookupConfig(UART_DEVICE_ID);
    if (NULL == Config)
    {
        return XST_FAILURE;
    }
    Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    /* Use Normal mode. */
    XUartPs_SetOperMode(&Uart_PS, XUARTPS_OPER_MODE_NORMAL);
    /* Set uart mode Baud Rate 115200, 8bits, no parity, 1 stop bit */
    XUartPs_SetDataFormat(&Uart_PS, &UartFormat);
    /*Set receiver FIFO interrupt trigger level, here set to 1*/
    XUartPs_SetFifoThreshold(&Uart_PS, 1);
    /* Enable the receive FIFO trigger level interrupt and empty interrupt for the device */
    XUartPs_SetInterruptMask(&Uart_PS, XUARTPS_IXR_RXOVR | XUARTPS_IXR_RXEMPTY);

    SetupInterruptSystem(&IntcInstPtr, &Uart_PS, UART_INT_IRQ_ID);
    print("254\n");
    sleep(1);
//    print("Waiting....\n");
    while (1)
    {
        switch (state)
        {
        case UART_RXCHECK: /* Check receiver flag, send received data */
        {
            if (ReceivedFlag)
            {
                /* Reset receiver pointer, flag, byte number */
                ReceivedBufferPtr = ReceivedBuffer;
                SendBufferPtr = ReceivedBuffer;
                SendByteNum = ReceivedByteNum;
                ReceivedFlag = 0;
                ReceivedByteNum = 1;
                recv_data = atoi(SendBufferPtr);
//                printf("%d\n", recv_data);
                memset(ReceivedBuffer, 0, sizeof ReceivedBuffer); //clear RecvBuffer
                delay_point_buffer[i++] = recv_data;
                if (i >= 4)
                {
                    real_angle_A = direction(delay_point_buffer[0], delay_point_buffer[1]);
//                    printf("A%f\n", real_angle);
                    real_angle_B = direction(delay_point_buffer[2], delay_point_buffer[3]);
                    printf("A%fB%f\n", real_angle_A, real_angle_B);
                    i = 0;
                }
//                UartPsSend(&Uart_PS, SendBufferPtr, SendByteNum);
            }
            else
            {
                state = UART_WAIT;
            }
            break;
        }
        case UART_WAIT: /* Wait for 1s */
        {
//            sleep(1);
            usleep(10000);
            state = UART_RXCHECK;
            break;
        }
        default:
            break;
        }
    }
}

void init_gpio(void)
{
    init_i_gpio_angle();
    init_i_gpio_angle_valid();
    init_o_gpio_delay_point();
    init_o_gpio_rom_fft_rst_n();
    init_o_gpio_sys_rst_n();
}

int SetupInterruptSystem(XScuGic *IntcInstancePtr, XUartPs *UartInstancePtr,
        u16 UartIntrId)
{
    int Status;
    /* Configuration for interrupt controller */
    XScuGic_Config *IntcConfig;

    /* Initialize the interrupt controller driver */
    IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
    if (NULL == IntcConfig)
    {
        return XST_FAILURE;
    }

    Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
            IntcConfig->CpuBaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }

    /*
     * Connect the interrupt controller interrupt handler to the
     * hardware interrupt handling logic in the processor.
     */
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
            (Xil_ExceptionHandler) XScuGic_InterruptHandler, IntcInstancePtr);

    Status = XScuGic_Connect(IntcInstancePtr, UartIntrId,
            (Xil_ExceptionHandler) Handler, (void *) UartInstancePtr);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }

    XScuGic_Enable(IntcInstancePtr, UartIntrId);
    Xil_ExceptionEnable();

    return Status;
}

void Handler(void *CallBackRef)
{
    XUartPs *UartInstancePtr = (XUartPs *) CallBackRef;
    u32 ReceivedCount = 0;
    u32 UartSrValue;

    UartSrValue =
    XUartPs_ReadReg(UartInstancePtr->Config.BaseAddress,
            XUARTPS_SR_OFFSET) & (XUARTPS_IXR_RXOVR | XUARTPS_IXR_RXEMPTY);
    ReceivedFlag = 0;

    if (UartSrValue & XUARTPS_IXR_RXOVR) /* check if receiver FIFO trigger */
    {
        ReceivedCount = UartPsRev(&Uart_PS, ReceivedBufferPtr, MAX_LEN);
        ReceivedByteNum += ReceivedCount;
        ReceivedBufferPtr += ReceivedCount;
        /* clear trigger interrupt */
        XUartPs_WriteReg(UartInstancePtr->Config.BaseAddress,
                XUARTPS_ISR_OFFSET, XUARTPS_IXR_RXOVR);
    }
    else if (UartSrValue & XUARTPS_IXR_RXEMPTY) /*check if receiver FIFO empty */
    {
        /* clear empty interrupt */
        XUartPs_WriteReg(UartInstancePtr->Config.BaseAddress,
                XUARTPS_ISR_OFFSET, XUARTPS_IXR_RXEMPTY);
        ReceivedFlag = 1;
    }

}

int UartPsSend(XUartPs *InstancePtr, u8 *BufferPtr, u32 NumBytes)
{

    u32 SentCount = 0U;

    /* Setup the buffer parameters */
    InstancePtr->SendBuffer.RequestedBytes = NumBytes;
    InstancePtr->SendBuffer.RemainingBytes = NumBytes;
    InstancePtr->SendBuffer.NextBytePtr = BufferPtr;

    while (InstancePtr->SendBuffer.RemainingBytes > SentCount)
    {
        /* Fill the FIFO from the buffer */
        if (!XUartPs_IsTransmitFull(InstancePtr->Config.BaseAddress))
        {
            XUartPs_WriteReg(InstancePtr->Config.BaseAddress,
                    XUARTPS_FIFO_OFFSET,
                    ((u32 )InstancePtr->SendBuffer.NextBytePtr[SentCount]));

            /* Increment the send count. */
            SentCount++;
        }
    }

    /* Update the buffer to reflect the bytes that were sent from it */
    InstancePtr->SendBuffer.NextBytePtr += SentCount;
    InstancePtr->SendBuffer.RemainingBytes -= SentCount;

    return SentCount;
}

int UartPsRev(XUartPs *InstancePtr, u8 *BufferPtr, u32 NumBytes)
{
    u32 ReceivedCount = 0;
    u32 CsrRegister;

    /* Setup the buffer parameters */
    InstancePtr->ReceiveBuffer.RequestedBytes = NumBytes;
    InstancePtr->ReceiveBuffer.RemainingBytes = NumBytes;
    InstancePtr->ReceiveBuffer.NextBytePtr = BufferPtr;

    /*
     * Read the Channel Status Register to determine if there is any data in
     * the RX FIFO
     */
    CsrRegister = XUartPs_ReadReg(InstancePtr->Config.BaseAddress,
            XUARTPS_SR_OFFSET);

    /*
     * Loop until there is no more data in RX FIFO or the specified
     * number of bytes has been received
     */
    while ((ReceivedCount < InstancePtr->ReceiveBuffer.RemainingBytes)
            && (((CsrRegister & XUARTPS_SR_RXEMPTY) == (u32) 0)))
    {
        InstancePtr->ReceiveBuffer.NextBytePtr[ReceivedCount] = XUartPs_ReadReg(
                InstancePtr->Config.BaseAddress, XUARTPS_FIFO_OFFSET);

        ReceivedCount++;

        CsrRegister = XUartPs_ReadReg(InstancePtr->Config.BaseAddress,
                XUARTPS_SR_OFFSET);
    }
    InstancePtr->is_rxbs_error = 0;
    /*
     * Update the receive buffer to reflect the number of bytes just
     * received
     */
    if (InstancePtr->ReceiveBuffer.NextBytePtr != NULL)
    {
        InstancePtr->ReceiveBuffer.NextBytePtr += ReceivedCount;
    }
    InstancePtr->ReceiveBuffer.RemainingBytes -= ReceivedCount;

    return ReceivedCount;
}

float direction(u32 delay_point1, u32 delay_point2)
{
    u32 angle, angle_valid;
    float real_angle;
    reset_PL();
    usleep(10);
    XGpio_DiscreteWrite(&o_gpio_delay_point, 1, delay_point1);
    reset_ROM_FFT();
    usleep(1000);

    XGpio_DiscreteWrite(&o_gpio_delay_point, 1, delay_point2);
    reset_ROM_FFT();
    usleep(100);

    while (1)
    {
        angle_valid = XGpio_DiscreteRead(&i_gpio_angle_valid, 1);
        if (angle_valid == 1)
        {
            usleep(1);
            angle = XGpio_DiscreteRead(&i_gpio_angle, 1);
            real_angle = (float) angle / 2097152 * 180;
            printf("\n");
            break;
        }
    }
    sleep(1);
    return real_angle;
}
